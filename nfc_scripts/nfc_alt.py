#!/usr/bin/env python3
"""
Alternativni NFC pristupi - mo≈æda postoji drugaƒçiji naƒçin
"""

import subprocess
import time
import os

def check_system_nfc():
    """Proveri da li sistem ima NFC podr≈°ku"""
    print("=== SYSTEM NFC CHECK ===")
    
    # Proveri da li postoje NFC ureƒëaji u sistemu
    try:
        result = subprocess.run(['lsusb'], capture_output=True, text=True)
        if 'NFC' in result.stdout or 'PN532' in result.stdout:
            print("‚úì NFC ureƒëaj pronaƒëen preko USB")
            print(result.stdout)
        else:
            print("‚úó Nema NFC ureƒëaja preko USB")
    except:
        print("lsusb komanda nije dostupna")
    
    # Proveri I2C ureƒëaje
    try:
        result = subprocess.run(['i2cdetect', '-y', '1'], capture_output=True, text=True)
        print("\nI2C sken:")
        print(result.stdout)
        
        if '24' in result.stdout:
            print("‚úì PN532 na adresi 0x24")
        else:
            print("‚úó PN532 nije na standardnoj adresi")
    except:
        print("i2cdetect nije dostupan")

def try_libnfc_approach():
    """Poku≈°aj sa libnfc bibliotekom"""
    print("\n=== LIBNFC APPROACH ===")
    
    # Proveri da li je libnfc instaliran
    try:
        result = subprocess.run(['nfc-list'], capture_output=True, text=True)
        print("nfc-list output:")
        print(result.stdout)
        
        if 'PN532' in result.stdout:
            print("‚úì libnfc vidi PN532!")
            
            # Poku≈°aj sken kartica
            print("\nPoku≈°avam sken kartica sa nfc-poll...")
            result = subprocess.run(['nfc-poll'], capture_output=True, text=True, timeout=10)
            print("nfc-poll output:")
            print(result.stdout)
            
        else:
            print("‚úó libnfc ne vidi PN532")
            
    except subprocess.TimeoutExpired:
        print("nfc-poll timeout - mo≈æda ƒçeka karticu")
    except FileNotFoundError:
        print("libnfc nije instaliran")
        print("Instaliraj sa: sudo apt install libnfc-bin libnfc-dev")
    except Exception as e:
        print(f"libnfc gre≈°ka: {e}")

def try_pn532_uart_mode():
    """Poku≈°aj UART mode umesto I2C"""
    print("\n=== PN532 UART MODE TEST ===")
    print("Mo≈æda je problem sa I2C protokolom...")
    
    print("Za UART mode potrebno je:")
    print("1. Prebaciti PN532 u UART mode (SEL0=L, SEL1=H)")
    print("2. Povezati na UART pinove umesto I2C")
    print("3. Koristiti serial komunikaciju")
    
    uart_available = input("Da li imate moguƒánost UART testa? (y/n): ")
    
    if uart_available.lower() == 'y':
        print("UART test kod...")
        
        # Poku≈°aj UART pristup
        try:
            import serial
            
            uart_ports = ['/dev/ttyUSB0', '/dev/ttyAMA0', '/dev/serial0']
            
            for port in uart_ports:
                try:
                    print(f"Testiram {port}...")
                    ser = serial.Serial(port, 115200, timeout=1)
                    
                    # Po≈°alji wakeup komandu
                    ser.write(b'\x55\x55\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xFF\x03\xFD\xD4\x14\x01\x17\x00')
                    time.sleep(0.1)
                    
                    response = ser.read(100)
                    if response:
                        print(f"‚úì UART odgovor na {port}: {response.hex()}")
                    else:
                        print(f"‚úó Nema UART odgovora na {port}")
                    
                    ser.close()
                    
                except Exception as e:
                    print(f"UART gre≈°ka na {port}: {e}")
                    
        except ImportError:
            print("pyserial nije instaliran: pip install pyserial")
    else:
        print("UART test preskoƒçen")

def try_different_python_libraries():
    """Poku≈°aj razliƒçite Python biblioteke"""
    print("\n=== DIFFERENT LIBRARIES TEST ===")
    
    libraries_to_try = [
        ("pn532pi", "pip install pn532pi"),
        ("nfcpy", "pip install nfcpy"),
        ("pynfc", "pip install pynfc"),
    ]
    
    for lib_name, install_cmd in libraries_to_try:
        print(f"\nTestiram biblioteku: {lib_name}")
        
        try:
            if lib_name == "pn532pi":
                # Poku≈°aj pn532pi
                import importlib
                pn532pi = importlib.import_module('pn532pi')
                
                print("‚úì pn532pi importovan")
                print("Testiram pn532pi...")
                
                # Test pn532pi koda
                try:
                    from pn532pi import Pn532, Pn532I2c
                    pn532 = Pn532(Pn532I2c(1))
                    pn532.begin()
                    
                    firmware = pn532.getFirmwareVersion()
                    if firmware:
                        print(f"‚úì pn532pi firmware: {firmware}")
                        
                        # Test card detection
                        print("Testiram detekciju sa pn532pi...")
                        success, uid = pn532.readPassiveTargetID()
                        if success:
                            print(f"üéâ pn532pi DETEKTOVAO KARTICU: {uid}")
                        else:
                            print("‚úó pn532pi - nema kartice")
                    else:
                        print("‚úó pn532pi firmware neuspe≈°an")
                        
                except Exception as e:
                    print(f"pn532pi test gre≈°ka: {e}")
                    
            elif lib_name == "nfcpy":
                import nfc
                print("‚úì nfcpy importovan")
                
                # nfcpy test
                try:
                    with nfc.ContactlessFrontend() as clf:
                        print("‚úì nfcpy ContactlessFrontend kreiran")
                        
                        # Poku≈°aj connect
                        target = clf.sense(nfc.clf.RemoteTarget('106A'))
                        if target:
                            print(f"üéâ nfcpy DETEKTOVAO KARTICU: {target}")
                        else:
                            print("‚úó nfcpy - nema kartice")
                            
                except Exception as e:
                    print(f"nfcpy test gre≈°ka: {e}")
                    
        except ImportError:
            print(f"‚úó {lib_name} nije instaliran")
            print(f"Instaliraj sa: {install_cmd}")
        except Exception as e:
            print(f"{lib_name} gre≈°ka: {e}")

def hardware_diagnostic():
    """Dijagnostika hardvera"""
    print("\n=== HARDWARE DIAGNOSTIC ===")
    
    checks = [
        "Da li je PN532 modul originalni ili klon?",
        "Da li su svi pinovi dobro spojeni?", 
        "Da li je napajanje stabilno 3.3V?",
        "Da li je GND pin povezan?",
        "Da li postoje kratki spojevi?",
        "Da li je antena na PN532 modulu o≈°teƒáena?",
        "Da li ste testirali sa vi≈°e od 5 razliƒçitih kartica?",
        "Da li kartice rade sa telefonom u direktnom kontaktu?",
        "Da li ste poku≈°ali drugi PN532 modul?"
    ]
    
    print("Proverite sledeƒáe:")
    for i, check in enumerate(checks, 1):
        print(f"{i}. {check}")
    
    print(f"\nODGOVORI:")
    responses = {}
    for i, check in enumerate(checks, 1):
        response = input(f"{i}. {check} (y/n/skip): ").strip().lower()
        responses[i] = response
    
    # Analiza odgovora
    print(f"\nANALIZA:")
    issues = []
    
    if responses.get(1) == 'n':
        issues.append("Klon PN532 moduli ƒçesto imaju probleme")
    if responses.get(2) == 'n':
        issues.append("Lo≈°e konekcije su ƒçest uzrok")
    if responses.get(3) == 'n':
        issues.append("Nestabilno napajanje mo≈æe uzrokovati RF probleme")
    if responses.get(6) == 'n':
        issues.append("O≈°teƒáena antena = nema RF komunikacije")
    if responses.get(7) == 'n':
        issues.append("Testirajte sa vi≈°e razliƒçitih kartica")
    if responses.get(8) == 'n':
        issues.append("Mo≈æda su kartice defektne")
    
    if issues:
        print("‚ö†Ô∏è MOGUƒÜI PROBLEMI:")
        for issue in issues:
            print(f"  ‚Ä¢ {issue}")
    else:
        print("‚úì Hardware izgleda OK - problem je mo≈æda u softveru")

def final_recommendations():
    """Finalne preporuke"""
    print("\n" + "üí°" * 20)
    print("FINALNE PREPORUKE")
    print("üí°" * 20)
    
    print("""
KORAK 1 - HARDWARE PROVERA:
‚Ä¢ Testirati sa drugim PN532 modulom
‚Ä¢ Proveriti sve konekcije multimetrom
‚Ä¢ Testirati napajanje pod optereƒáenjem
‚Ä¢ Probati originalni (ne klon) PN532 modul

KORAK 2 - SOFTWARE ALTERNATIVA:
‚Ä¢ Instalirati libnfc: sudo apt install libnfc-bin
‚Ä¢ Testirati sa nfc-poll komandom  
‚Ä¢ Probati pn532pi biblioteku
‚Ä¢ Testirati UART mode umesto I2C

KORAK 3 - KARTICE:
‚Ä¢ Nabaviti nove, poznate dobre kartice
‚Ä¢ Testirati NTAG213 tagove (pouzdani)
‚Ä¢ Probati hotel kartice ili transport kartice
‚Ä¢ Proveriti da kartice rade sa drugim ƒçitaƒçima

KORAK 4 - ENVIRONMENT:
‚Ä¢ Testirati u drugoj prostoriji (bez interferenci)
‚Ä¢ Iskljuƒçiti sve WiFi/Bluetooth ureƒëaje
‚Ä¢ Probati sa baterije (ne adapter)
‚Ä¢ Testirati na drugaƒçijoj povr≈°ini

AKO NI≈†TA NE RADI:
Najverojatniji uzroci su:
1. Defektni ili klon PN532 modul (60% verovatnoƒáa)
2. Nekompatibilne ili o≈°teƒáene kartice (25%)
3. Hardware problem - konekcije/napajanje (10%)
4. Software problem - biblioteke/konfiguracija (5%)
    """)

def main():
    while True:
        print("\n" + "üîß" + "="*48 + "üîß")
        print("ALTERNATIVNI NFC PRISTUPI")
        print("üîß" + "="*48 + "üîß")
        print("1. üîç System NFC check")
        print("2. üìö LibNFC approach")  
        print("3. üîå PN532 UART mode test")
        print("4. üêç Different Python libraries")
        print("5. üîß Hardware diagnostic")
        print("6. üí° Finalne preporuke")
        print("7. ‚ùå Izlaz")
        
        choice = input("\nIzaberite opciju (1-7): ").strip()
        
        if choice == '1':
            check_system_nfc()
        elif choice == '2':
            try_libnfc_approach()
        elif choice == '3':
            try_pn532_uart_mode()
        elif choice == '4':
            try_different_python_libraries()
        elif choice == '5':
            hardware_diagnostic()
        elif choice == '6':
            final_recommendations()
        elif choice == '7':
            break
        else:
            print("Nevalidna opcija!")

if __name__ == "__main__":
    main()